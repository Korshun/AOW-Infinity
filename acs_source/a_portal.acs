/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * All Out War 2 portal script
 * Credit to VoltlocK for originally creating the engine
 * With modifications by Eruanna, Dusk and the Omega Team
 *
 * You may use portions of this script in your project as long as you give
 * credit where credit is due. Please don't be lame and just copy-paste any
 * of this and call it your own. Thanks!
 */

function int Portal_GetDestination (int idx) {
	switch (idx) {
		case 0: return 1;
		case 1: return 0;
		case 2: return 3;
		case 3: return 2;
	}
	
	return -1;
}

// Portal use this to request TIDs.
script SC_PORTAL_TIDREQUEST (int team) {
	if (team == TEAM_RED) {
		if (!ThingCount (0, TID_PORTAL_RED1)) {Thing_ChangeTID (0, TID_PORTAL_RED1); terminate;}
		if (!ThingCount (0, TID_PORTAL_RED2)) {Thing_ChangeTID (0, TID_PORTAL_RED2); terminate;}
		// what is this i don't even
		SetActorState (0, "Disapproved");
	} else {
		if (!ThingCount (0, TID_PORTAL_BLUE1)) {Thing_ChangeTID (0, TID_PORTAL_BLUE1); terminate;}
		if (!ThingCount (0, TID_PORTAL_BLUE2)) {Thing_ChangeTID (0, TID_PORTAL_BLUE2); terminate;}
		SetActorState (0, "Disapproved");
	}
	
	Print (s:"Portal gets tid ", d:ActivatorTID());
}

script SC_PORTAL_INIT (void) {
	int disapproved;
	int angle, x, y, z, z2;
	int tid;
	int idx;
	
	// check if we're supposed to have these in the first place
	if (!UsePortals) disapproved = 3;
	else {
		x = GetActorX (0); y = GetActorY (0); z = GetActorFloorZ (0); angle = GetActorAngle (0);
		
		// Check the portal actor's size by attempting to spawn a checker actor.
		// This actor has the same radius and height as the actual portal but removes
		// itself instantly. If it fails to spawn, the actual portal doesn't have
		// enough space either.
		if (!Spawn ("Utility_PortalChecker", x + (cos(angle)*128), y + (sin(angle)*128), z)) disapproved = 2;
		delay (10);
		
		// Determine the idx of this portal
		idx = -1;
		if (ThingCount (0, TID_PORTAL_BLUE1) == 1 && !Portals[0] && PlayerTeam() == TEAM_BLUE) idx = 0;
		if (ThingCount (0, TID_PORTAL_BLUE2) == 1 && !Portals[1] && PlayerTeam() == TEAM_BLUE) idx = 1;
		if (ThingCount (0, TID_PORTAL_RED1) == 1 && !Portals[2] && PlayerTeam() == TEAM_RED) idx = 2;
		if (ThingCount (0, TID_PORTAL_RED2) == 1 && !Portals[3] && PlayerTeam() == TEAM_RED) idx = 3;
		if (idx == -1) {
			// this should -NEVER- happen
			Log (s:"Warning: Failed to determine portal IDX during init! Something's going nuts here!");
			disapproved = 6;
		}
		
		tid = TID_PORTAL_BLUE1 + idx;
		
		// Determine destination
		int dest = Portal_GetDestination (idx);
		
		// Check that the portals are not too close to each other.
		int PortalMinDistance = 192;
		if (idx == 0 && Portals[1] && CheckActorDistance(TID_PORTAL_BLUE1, TID_PORTAL_BLUE2, PortalMinDistance))
			disapproved = 4;
		else if (idx == 1 && Portals[0] && CheckActorDistance(TID_PORTAL_BLUE2, TID_PORTAL_BLUE1, PortalMinDistance))
			disapproved = 4;
		else if (idx == 2 && Portals[3] && CheckActorDistance(TID_PORTAL_RED1, TID_PORTAL_RED2, PortalMinDistance))
			disapproved = 4;
		else if (idx == 3 && Portals[2] && CheckActorDistance(TID_PORTAL_RED2, TID_PORTAL_RED1, PortalMinDistance)) disapproved = 4;
		
		// Check sight - this may not be built into void!
		if (CheckActorInventory (tid, "Utility_PortalNotInSight")) disapproved = 5;
		
		// Not into space either... though this assumes no map uses F_SKY1 as a walkable flat
		// This is needed so that portals won't appear in AOW10's outer space sectors.
		if (CheckActorFloorTexture (tid, "F_SKY1")) disapproved = 5;
	}
	
	if (disapproved) {
		SetActorState (tid, "Disapproved");
		
		switch (disapproved) {
		case 1:
			HudMessage (s:"The other portal is too far away!";
				HUDMSG_FADEOUT, 15000, CR_WHITE,
				INTEL_XPOS, INTEL_YPOS, 2.0, 1.0);
			break;
		case 2:
			HudMessage (s:"The portal needs more space than that...";
				HUDMSG_FADEOUT, 15000, CR_WHITE,
				INTEL_XPOS, INTEL_YPOS, 2.0, 1.0);
			break;
		case 3:
			HudMessage (s:"Portals are disabled!";
				HUDMSG_FADEOUT, 15000, CR_WHITE,
				INTEL_XPOS, INTEL_YPOS, 2.0, 1.0);
			break;
		case 4:
			HudMessage (s:"The other portal is too close!";
				HUDMSG_FADEOUT, 15000, CR_WHITE,
				INTEL_XPOS, INTEL_YPOS, 2.0, 1.0);
			break;
		case 5:
			HudMessage (s:"You can't put that there. :I";
				HUDMSG_FADEOUT, 15000, CR_WHITE,
				INTEL_XPOS, INTEL_YPOS, 2.0, 1.0);
			break;
		default:
			HudMessage (s:"Initialization failed! Unknown failure code.";
				HUDMSG_FADEOUT, 15000, CR_WHITE,
				INTEL_XPOS, INTEL_YPOS, 2.0, 1.0);
			break;
		}
		delay (3*35);
		RefundCredits (Credits[PlayerNumber()+1], 175);
		terminate;
	}
	
	// Sanity checks complete - the portal is good now!
	Portals[idx] = true;
	SetThingSpecial (tid, ACS_ExecuteAlways, SC_PORTAL_FUNCTION, 0, idx);
	
	// What sphere color should we use?
	int spheretype, fxtype;
	if (idx >= 2) {
		spheretype = "Utility_PortalSphereRed";
		fxtype = "Utility_PortalFX";
	} else {
		spheretype = "Utility_PortalSphereBlue";
		fxtype = "Utility_PortalFXBlue";
	}
	
	int tid_teledest = TID_PORTAL_TELEDEST + idx;
	int tid_effects = TID_PORTAL_FX + idx;
	
	// Spawn the other needed actors now.
	x = GetActorX (tid); y = GetActorY (tid); z = GetActorFloorZ (tid); angle = GetActorAngle (tid);
	Spawn ("TeleportDest", x + (cos(angle+0.00)*64), y + (sin(angle+0.00)*64), z, tid_teledest, angle >> 8);
	Spawn ("TeleportDest", x + (cos(angle+0.325)*64), y + (sin(angle+0.325)*64), z, tid_teledest, (angle+0.325) >> 8);
	Spawn ("TeleportDest", x + (cos(angle+0.50)*64), y + (sin(angle+0.50)*64), z, tid_teledest, (angle+0.50) >> 8);
	Spawn ("TeleportDest", x + (cos(angle+0.675)*64), y + (sin(angle+0.675)*64), z, tid_teledest, (angle+0.675) >> 8);
	Spawn ("Utility_PortalStand", x + (cos(angle+0.25)*80), y + (sin(angle+0.25)*80), z+32.0, tid_effects);
	Spawn ("Utility_PortalStand", x + (cos(angle+0.75)*80), y + (sin(angle+0.75)*80), z+32.0, tid_effects);
	Spawn (spheretype, x + (cos(angle+0.25)*80), y + (sin(angle+0.25)*80), z+56.0, tid_effects);
	Spawn (spheretype, x + (cos(angle+0.75)*80), y + (sin(angle+0.75)*80), z+56.0, tid_effects);
	Spawn (fxtype, x, y, z+56.0, tid_effects);
	
	delay (1);
	
	// Does this portal have a link? If yes, send them both
	// to active. Otherwise, set this inactive.
	if (Portals[dest]) {
		SetActorState (tid, "Active");
		SetActorState (tid_effects, "Init.Active");
		
		SetActorState (TID_PORTAL_BLUE1 + dest, "Active");
		SetActorState (TID_PORTAL_FX + dest, "Active");
		Log (n:0, s:" constructs a portal and establishes a link.");
	} else {
		SetActorState (tid, "Inactive");
		SetActorState (tid_effects, "Init.Inactive");
		Log (n:0, s:" constructs a portal end.");
	}
	
	// update the hud
	ACS_ExecuteAlways (930, 0, BUILDING_PORTAL, PlayerTeam());
}

// Portal teleport function
script SC_PORTAL_FUNCTION (int idx) {
	int dest = Portal_GetDestination (idx);
	int tid = TID_PORTAL_BLUE1 + idx;
	
	// this script gets executed on both bump and death
	if (!ThingCount (0, tid)) {
		Log(n:0, s:" destroys a portal.");
		
		// teamkilling should not yield a reward...
		if (idx >= 2 && PlayerTeam () == TEAM_BLUE || idx < 2 && PlayerTeam () == TEAM_RED) {
			ACS_ExecuteAlways (324, 0, 1); // 50xp
			AddCredits (Credits[PlayerNumber () + 1], 200);
		}
		
		Portals[idx] = false;
		Thing_Remove (TID_PORTAL_TELEDEST + idx);
		Thing_Remove (TiD_PORTAL_FX + idx);
		// SetActorState (TID_PORTAL_FX + idx, "Remove");
		
		// [Dusk] tell the possible now-defunct destination
		// that it lost connection.
		if (Portals[dest]) {
			SetActorState (TID_PORTAL_BLUE1 + dest, "Inactive");
			SetActorState (TID_PORTAL_FX + dest, "Inactive");
		}
		
		// update the hud
		ACS_ExecuteAlways (930, 0, BUILDING_PORTAL, PlayerTeam());
		
		terminate;
	}
	
	// prevent players from executing this multiple times
	if (HasTeleported[PlayerNumber()]) terminate;
	
	// no quick cashups
	if (CheckInventory ("IsHarvester")) {
		DisplayCross();
		SetFont ("BIGFONT");
		HudMessage(s:"You can't go through\nportals as a harvester!";
			HUDMSG_FADEOUT, 1800+PlayerNumber(),
			CR_RED, 0.5, 0.45, 2.0, 1.0);
		HasTeleported[PlayerNumber()] = true;
		delay (35);
		HasTeleported[PlayerNumber()] = false;
		terminate;
	}
	
	// yeah no
	if (CheckInventory ("IsMech")) {
		DisplayCross();
		SetFont ("BIGFONT");
		HudMessage(s:"You can't go through\nportals in a mech!";
			HUDMSG_FADEOUT, 1800+PlayerNumber(),
			CR_RED, 0.5, 0.45, 2.0, 1.0);
		HasTeleported[PlayerNumber()] = true;
		delay (35);
		HasTeleported[PlayerNumber()] = false;
		terminate;
	}
	
	// check that a destination exists - this is by now only
	// a sanity check as inactive portals are non-solid
	if (!ThingCount (0, 1500+dest)) {
		DisplayCross();
		SetFont ("BIGFONT");
		HudMessage(s:"There is no destination portal!";
			HUDMSG_FADEOUT, 1800+PlayerNumber(),
			CR_RED, 0.5, 0.45, 2.0, 1.0);
		HasTeleported[PlayerNumber()] = true;
		delay (35);
		HasTeleported[PlayerNumber()] = false;
		terminate;
	}
	
	Teleport (TID_PORTAL_TELEDEST + dest, 0, 0);
	
	// cool down for half a second to prevent players from getting
	// teleported multiple times.
	HasTeleported[PlayerNumber()] = true;
	delay (18);
	HasTeleported[PlayerNumber()] = false;
}