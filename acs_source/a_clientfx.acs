// Clientside effects and designation actors
int ChemSmokers[32];

script 943 OPEN CLIENTSIDE {	
	// [SP] This script allows clients to keep track of what player# they are
	ConsoleCommand ("puke 944");
	
	delay (5);
	
	// get outside the spawn room
	if (!PlayerInGame (PlayerNumber ()))
		ConsoleCommand ("puke 940");
	
	delay (5);
	
	// effects + hud
	ConsoleCommand ("puke 366");
	
	// bodycount clock
	// ConsoleCommand ("puke 368");
	
	// building HUD
	ConsoleCommand ("puke 945");
}

script 944 (void) NET CLIENTSIDE {ConsolePlayer = PlayerNumber();}
script 946 (void) NET CLIENTSIDE {Log(s:"I am player ", d:ConsolePlayer, s:" named ", n:0);}

script 366 (void) NET CLIENTSIDE {
	if (PlayerIsBot(PlayerNumber())) terminate;
	if (ConsolePlayer == -1) terminate;
	
	// if (GetCVAR ("aow_nofriendinfo") <= 0) ConsoleCommand ("set aow_nofriendinfo 0");
	
	int teammate, i;
	while (1) {
		delay (32);
		SpawnSpotForced ("TiberiumChemSmoke", 402, 0, 0);
		
		// display smoke on tib-carrying players
		for (i = 0; i <= 31; i++) {
			if (CheckActorInventory (3800+i, "TiberiumCrystal") && !ChemSmokers[i])
				ACS_ExecuteAlways (355, 0, i, 0);
		}
		
		// see friendly stealths
		for (i = 0; i <= 31; i++) {
			teammate = GetPlayerInfo (i, PLAYERINFO_TEAM) == GetPlayerInfo (ConsolePlayer, PLAYERINFO_TEAM);
			if (!PlayerInGame (ConsolePlayer)) teammate = 1; // spects
			if (CheckActorProperty (3800+i, APROP_RenderStyle, STYLE_None) && teammate && i != ConsolePlayer)
				ACS_ExecuteAlways (355, 0, i, 1);
		}
		
		// jumpjet fire
		for (i = 0; i <= 31; i++) {
			if (CheckActorInventory (3800+i, "JumpjetSwitch") && !ChemSmokers[i])
				ACS_ExecuteAlways (355, 0, i, 2);
		}
	}
}

script 355 (int i, int what) CLIENTSIDE {
	int x;
	switch (what) {
	case 0:
		// chem smoke for tiberium players
		
		// no double running
		if (ChemSmokers[i]) terminate;
		ChemSmokers[i] = 1;
		
		for (x = 0; x < 5; x++) {
			if (!CheckActorInventory (3800+i, "TiberiumCrystal")) {ChemSmokers[i] = 0; terminate;}
			SpawnSpotForced ("TiberiumChemSmokePlayer", 3800+i, 0, GetActorAngle(3800+i)>>8);
			delay (6);
		}
		ChemSmokers[i] = 0;
		break;
	case 1:
		// visible friendly stealths
		SetActorProperty (3800+i, APROP_RenderStyle, STYLE_Translucent);
		SetActorProperty (3800+i, APROP_Alpha, 0.4);
		for (x = 0; x < 6; x++) {
			if (!CheckActorProperty (3800+i, APROP_RenderStyle, STYLE_Translucent)) terminate;
			if (CheckActorInventory (3800+i, "StealthMode") != 1) terminate;
			SetActorProperty (3800+i, APROP_Alpha, 0.4 + (random(0,10) << 16)/10); // flicker a bit :P
			delay (5);
		}
		SetActorProperty (3800+i, APROP_RenderStyle, STYLE_None);
		SetActorProperty (3800+i, APROP_Alpha, 0.0);
		break;
	case 2:
		// jumpjet fire
		// ChemSmokers[] is used here as well - no conflicts can happen since no
		// player can be harvester and have jumpjet at the same time.
		if (ChemSmokers[i]) terminate;
		ChemSmokers[i] = 1;
		
		for (x = 0; x < 10; x++) {
			if (!CheckActorInventory (3800+i, "JumpjetSwitch")) {ChemSmokers[i] = 0; terminate;}
			SpawnSpotForced ("JumpjetFire", 3800+i, 0, GetActorAngle(3800+i)>>8);
			delay (3);
		}
		ChemSmokers[i] = 0;
		break;
	}
}

script 400 OPEN CLIENTSIDE {
	while (1) {
		if (!GetCVAR ("hud_scale"))
			ConsoleCommand("set hud_scale true");
		delay(1);
	}
}

// Spawns a trail from activator to tid.
#define MAX_TRAILTYPES 3
str TrailTypes[MAX_TRAILTYPES] = {
	"ObeliskBlastFX",
	"ObeliskBlastBlueFX",
	"VoltageSpark"
};

// trail -> player
script 986 (int type, int target) CLIENTSIDE {
	if (type == 0) {
		if (!SpawnTrail (0, target, 2, 32, 7, 0, 0, 0, -6.0, 0, 36.0)) {
			Log (s:"Trailing failed");
		}
	}
}

// [Dusk] Spawns a trail of TrailTypes[type] actors from src to dest, with interval units
// in between (with a cap of 128 trail actors at most).
function bool SpawnTrail (int src, int dest, int type, int interval, int rand,
				  int xoff0, int yoff0, int zoff0, int xoff1, int yoff1, int zoff1) {
	// The server may not do this
	if (ConsolePlayer == -1)
		return false;
	
	int x, y, z;
	
	// 0 means self
	if (!src) src = ActivatorTID ();
	if (!dest) dest = ActivatorTID ();
	
	// Can't trail to ourselves!
	if (src == dest) {
		Log (s:"Can't trail to ourselves!");
		return false;
	}
	
	// From where to where?
	int x0 = GetActorX (src);
	int y0 = GetActorY (src);
	int z0 = GetActorZ (src);
	int a0 = GetActorAngle (src);
	int x1 = GetActorX (dest);
	int y1 = GetActorY (dest);
	int z1 = GetActorZ (dest);
	int a1 = GetActorAngle (dest);
	
	// Apply offsets
	x0 += FixedMul (cos (a0+0.25), xoff0) + FixedMul (cos (a0), yoff0);
	y0 += FixedMul (sin (a0+0.25), xoff0) + FixedMul (sin (a0), yoff0);
	z0 += zoff0;
	x1 += FixedMul (cos (a1+0.25), xoff1) + FixedMul (cos (a1), yoff1);
	y1 += FixedMul (sin (a1+0.25), xoff1) + FixedMul (sin (a1), yoff1);
	z1 += zoff1;
	
	int d = fdistance (src, dest);
	
	// How many trail actors to spawn?
	if (interval <= 32)
		interval = 32;
	
	int n = (d>>16) / interval;
	
	if (n > 128)
		n = 128;
	
	if (GetCVar ("aow_lowfx"))
		n /= 2;
	
	// Nothing to spawn!
	if (n <= 0)
		return false;
	
	// Distance between current point and first flare
	int dx0 = (x1-x0) / n;
	int dy0 = (y1-y0) / n;
	int dz0 = (z1-z0) / n;
	
	if (rand > 0) {
		// Randomize stuff up
		int r = random (rand/2, rand) * 0.5;
		x0 += FixedMul (r, dx0);
		y0 += FixedMul (r, dy0);
		z0 += FixedMul (r, dz0);
		
		// If we're offsetting past halfway to first actor, clamp
		// the last actor out so that it doesn't look odd
		//if (r >= 0.5)
		//	n--;
		
		// randomize the distance a bit
		if (rand > 7)
			n += random (-1, 1);
	}
	
	// Validity check
	if (type < 0 || type >= MAX_TRAILTYPES) {
		Log (s:"SpawnTrail: Tried to spawn an unknown trail type ", d:type, s:"!");
		return false;
	}
	
	// information gathered, actually spawn the flares now
	for (int i = 1; i <= n; i++) {
		x = x0 + i*dx0;
		y = y0 + i*dy0;
		z = z0 + i*dz0;
		
		if (rand > 0) {
			x += random (-rand, rand) * 0.5;
			y += random (-rand, rand) * 0.5;
			z += random (-rand, rand) * 0.5;
		}
		
		Spawn (TrailTypes[type], x, y, z);
		// Log (d:i, s:": ", f:x,s:", ", f:y,s:", ",f:z);
	}
	
	return true;
}