/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * All Out War 2 core mechanism scripts
 * Credit to VoltlocK for originally creating the engine
 * With modifications by Eruanna, Dusk and the Omega Team
 *
 * You may use portions of this script in your project as long as you give
 * credit where credit is due. Please don't be lame and just copy-paste any
 * of this and call it your own. Thanks!
 */

script 999 OPEN {
	RankTitles[0] = "Private";
	RankTitles[1] = "Corporal";
	RankTitles[2] = "Sergeant";
	RankTitles[3] = "Master Sgt.";
	RankTitles[4] = "Officer";
	RankTitles[5] = "Lieutenant";
	RankTitles[6] = "Major";
	RankTitles[7] = "Commando";
	
	if (GetCVar("aow_disablemechs") == 0)
		ConsoleCommand("set aow_mechs 1");
	else
		ConsoleCommand("set aow_mechs 0");

	//Red
	GotRefinery[0] = True;
	GotBarracks[0] = True;
	GotFactory[0] = True;
	GotPlant[0] = True;
	GotRepair[0] = True;
	GotObelisk[0] = True;
	BaseLeft[0] = 5;
	//Blue
	GotRefinery[1] = True;
	GotBarracks[1] = True;
	GotFactory[1] = True;
	GotPlant[1] = True;
	GotRepair[1] = True;
	GotObelisk[1] = True;
	BaseLeft[1] = 5;

	if(GetCVAR("aow_tickets") <= 1 && TicketPool == False)
		ConsoleCommand("set aow_tickets 75");
	else if(GetCVAR("aow_tickets") <= 100 && TicketPool == True)
		ConsoleCommand("set aow_tickets 250");
	StartingTickets = GetCVAR("aow_tickets");
	
	Tickets[0] = StartingTickets;
	Tickets[1] = StartingTickets;

	SetLineSpecial(159,80,342,0,0,0,0);
	
	delay (5);
	
	SpawnSpotForced ("CrateMapMarker", TID_CRATE, 0, 0);
	SpawnSpotForced ("TiberiumMapMarker", TID_TIBERIUM, 0, 0);
	
	delay (5);
	// wf unavailability
	if (!ThingCount (T_NONE, 107) && !ThingCount (T_NONE, 207)) {
		GotFactory[0] = 0;
		GotFactory[1] = 0;
		Team_GivePoints (TEAM_RED, 1, 0);
		Team_GivePoints (TEAM_BLUE, 1, 0);
	}
	
	ACS_ExecuteAlways (930, 0, BUILDING_ALL, TEAM_RED);
	ACS_ExecuteAlways (930, 0, BUILDING_ALL, TEAM_BLUE);
	
	// [Dusk] If ticket pool is enabled, spawn ticket counters. These counters
	// are used to inform clients about ticket values, since the left-hand
	// hud is client-sided. "Physically", the ticket counters are map spots
	// spawned at the respective team's Repair Facilities. The counters'
	// angle tells the starting ticket amount, their speed tells the current
	// ticket amount.
	SpawnSpotForced ("MapSpot", 109, TID_TICKETCOUNTER_BLUE, 0);
	SpawnSpotForced ("MapSpot", 209, TID_TICKETCOUNTER_RED, 0);
	SetActorAngle (TID_TICKETCOUNTER_BLUE, StartingTickets);
	SetActorAngle (TID_TICKETCOUNTER_RED, StartingTickets);
	if (TicketPool) {
		SetActorSpeed (TID_TICKETCOUNTER_BLUE, StartingTickets);
		SetActorSpeed (TID_TICKETCOUNTER_RED, StartingTickets);
	} else {
		SetActorSpeed (TID_TICKETCOUNTER_BLUE, 0);
		SetActorSpeed (TID_TICKETCOUNTER_RED, 0);
	}
	
	// Activate developer mode if the proper cvar is set.
	if (GetCVAR ("aow_developer")) {
		DeveloperSafetyLock = 0x7FFFFFFF;
		ACS_ExecuteAlways (404, 0);
	}
}

// Server settings
script 599 OPEN {
	delay (1);
	
	// ==================================
	// DMFLAGS
	if (!GetCVAR ("sv_doubleammo")) ConsoleCommand ("sv_doubleammo 1");
	if (!GetCVAR ("sv_nofov")) ConsoleCommand ("sv_nofov 1");
	if (!GetCVAR ("alwaysapplydmflags")) ConsoleCommand ("alwaysapplydmflags 1");
	if (!GetCVAR ("sv_weapondrop")) ConsoleCommand ("sv_weapondrop 1");
	if (!GetCVAR ("sv_itemrespawn")) ConsoleCommand ("sv_itemrespawn 1");
	if (!GetCVAR ("compat_limited_airmovement")) ConsoleCommand ("compat_limited_airmovement 1");
	
	// [Dusk] the engine assumes that players stay dead for at least a second
	if (GetCVAR ("compat_instantrespawn")) ConsoleCommand ("compat_instantrespawn 0");
	
	// [Dusk] enforce no pointlimit until game is considered over. Pointlimit is used
	// to end the game when needed. We don't want this script to conflict it at any
	// given time.
	if (!GameOver && GetCVAR("pointlimit") != 0) ConsoleCommand("pointlimit 0");
	
	// ==================================
	// CUSTOM CVARS
	// w/ sanity checks
	if (!GetCVAR ("aow_credflow")) ConsoleCommand ("set aow_credflow 4");
	if (GetCVAR ("aow_startcredits") <= 0) ConsoleCommand ("set aow_startcredits 300");
	if (GetCVAR ("aow_creditfrag") <= 0) ConsoleCommand ("set aow_creditfrag 50");	
	if (GetCVAR ("aow_bonusamount") <= 0) ConsoleCommand ("set aow_bonusamount 300");	
	if (GetCVAR ("aow_bonustime") <= 0) ConsoleCommand ("set aow_bonustime 5");
	if (GetCVAR ("aow_medicbonusneed") <= 0) ConsoleCommand ("set aow_medicbonusneed 175");
	if (GetCVAR ("aow_repairbonus") <= 0) ConsoleCommand ("set aow_repairbonus 1");	
	if (GetCVAR ("aow_guardianlimit") <= 0) ConsoleCommand ("set aow_guardianlimit 2");
	if (GetCVAR ("aow_ticketpool") <= 0) ConsoleCommand ("set aow_ticketpool 0");
	//[SP]How long you can stay on a team before you are never switched.
	if (GetCVAR ("aow_teamstaytime") <= 0) ConsoleCommand("set aow_teamstaytime 2");
	
	// Plasma Cannon initial delay
	if (!GetCVAR ("aow_plasmapurchasedelay")) ConsoleCommand("set aow_plasmapurchasedelay 5");
	//[SP]Maximum number of plasma cannons per team. (Set to -1 for unlimited)
	if (!GetCVAR ("aow_maxcannonsperteam")) ConsoleCommand("set aow_maxcannonsperteam 4");
	// [Dusk] Time (in minutes) to determine plasma cannon cooldown. Use -1 to disable
	if (!GetCVAR ("aow_plasmacooldown")) ConsoleCommand("set aow_plasmacooldown 3");
	
	//[SP]How long you have to wait to buy a new superweapon beacon. (Minutes) (Set to -1 to disable wait)
	if (!GetCVAR ("aow_beaconpurchasedelay"))ConsoleCommand("set aow_beaconpurchasedelay 5");
	
	// [SP]Maximum number of time cops per team. (Set to -1 for unlimited)
	if (!GetCVAR ("aow_maxtimecopsperteam")) ConsoleCommand("set aow_maxtimecopsperteam 1");
	
	// [Dusk] How many minutes until Timed C4 can be used. (-1 to disable)
	if (!GetCVAR ("aow_c4delay")) ConsoleCommand("set aow_c4delay 5");
	
	//[SP] Time (in minutes) before sudden death.
	// [Dusk] changed default to 45, -1 means immediate
	if (GetCVAR ("aow_suddendeathtime") == 0) ConsoleCommand("set aow_suddendeathtime 45");
	
	// [Dusk] Sudden death degeneration
	if (GetCVAR ("aow_degeneration") <= 0) ConsoleCommand("set aow_degeneration 0");
	if (GetCVAR ("aow_degenerationinterval") <= 0) ConsoleCommand("set aow_degenerationinterval 10");
	
	if (GetCVAR ("aow_tournamentmode") <= 0) ConsoleCommand("set aow_tournamentmode 0");
	if (GetCVAR ("aow_disablemechs") <= 0) ConsoleCommand("set aow_disablemechs 0");
	if (GetCVAR ("aow_surrendermode") <= 0) ConsoleCommand("set aow_surrendermode 0");
	
	// [Dusk] How much score does destroying a building award you, in addition to difference?
	if (GetCVAR ("aow_buildingpoints") <= 0) ConsoleCommand ("set aow_buildingpoints 125");
	
	// TODO: get rid of these variables and replace with direct GetCVAR calls
	StartCredits = GetCVAR("aow_startcredits");
	CreditFlow = GetCVAR("aow_credflow");
	CreditFlowPower = GetCVAR("aow_powercredflow");
	CreditFragAward = GetCVAR("aow_creditfrag");
	CreditAwardTime = GetCVAR("aow_bonustime");
	CreditAwardAmount = GetCVAR("aow_bonusamount");
	CreditRepairAmount = GetCVAR("aow_repairbonus");
	GuardianLimit = GetCVAR("aow_guardianlimit");
	MechEnabled = GetCVAR("aow_mechs");
	TicketPool = GetCVAR("aow_ticketpool");
	TeamStayTime = GetCVAR("aow_teamstaytime");
	CannonPurchaseDelay = GetCVAR("aow_plasmapurchasedelay") * 35 * 60;
	MaxCannonsPerTeam = GetCVAR("aow_maxcannonsperteam");
	MaxTimeCopsPerTeam = GetCVAR("aow_maxtimecopsperteam");
	TournamentMode = GetCVAR("aow_tournamentmode");
	BeaconPurchaseDelay = GetCVAR("aow_beaconpurchasedelay") * 60;
	PlasmaCooldownTime = GetCVAR("aow_plasmacooldown") * 35 * 60;
	TimedC4Delay = GetCVar ("aow_c4delay");
	MedicBonusNeed = GetCVAR("aow_medicbonusneed");

	delay(35*5);
	restart;
}

// credit flow
script 4 OPEN {
	int i, p, redflow, blueflow;
	while (1) {
		p = 25;
		if (GotPlant[0] == 1) p += 25;
		if (GotRefinery[0] == 1) p += 50;
		if (MiniRefinery[0] == 1) p += 75;
		redflow = (CreditFlow * p) / 100;
		
		p = 25;
		if (GotPlant[1] == 1) p += 25;
		if (GotRefinery[1] == 1) p += 50;
		if (MiniRefinery[1] == 1) p += 75;
		blueflow = (CreditFlow * p) / 100;
		
		for (i = 0; i < 32; i++) {
			if (PlayerInGame(i) && GetActorProperty (3800+i, APROP_HEALTH) > 0 && !IsAdmin[i]) {
				if (GetPlayerInfo (i, PLAYERINFO_TEAM) == TEAM_RED)
					GiveCredits (i, redflow);
				else if (GetPlayerInfo (i, PLAYERINFO_TEAM) == TEAM_BLUE)
					GiveCredits (i, blueflow);
			}
		}
		
		delay (35);
	}
}

//Setting Player scripts
script 10 RESPAWN {
	if (StartTime[PlayerNumber()] == 0) InitPlayer();

	GiveInventory("Ingame",1);
	GiveInventory("IsInSpawnRoom", 1);
	if(PlayerTeam() == TEAM_BLUE) {
		GiveInventory ("BlueTeamArmor",1);
		GiveInventory ("IsBlue",1);
		TakeInventory ("RedTeamArmor",1);
		TakeInventory ("IsRed",1);
	}
	else if(PlayerTeam() == TEAM_RED)
	{
		GiveInventory ("RedTeamArmor",1);
		GiveInventory ("IsRed",1);
		TakeInventory ("BlueTeamArmor",1);
		TakeInventory ("IsBlue",1);
	}
	
	Thing_ChangeTID (0, PlayerNumber()+3800);

	if(GetPlayerInfo(PlayerNumber(),PLAYERINFO_GENDER) == 1) {
		SetActorProperty(0,APROP_DeathSound,"female/death");
		GiveInventory("IsFemale",1);
	}
	
	ACS_ExecuteAlways (97, 0);
	SetWeapon ("Unarmed");
}

script 11 ENTER {
	delay(5);
	InitPlayer();

	GiveInventory("Ingame",1);
	GiveInventory("IsInSpawnRoom", 1);
	if(PlayerTeam() == TEAM_BLUE)
	{
		GiveInventory("BlueTeamArmor",1);
		GiveInventory("IsBlue",1);
	}
	else if(PlayerTeam() == TEAM_RED)
	{
		GiveInventory("RedTeamArmor",1);
		GiveInventory("IsRed",1);
	}

	Thing_ChangeTID(0,PlayerNumber()+3800);

	if(GetPlayerInfo(PlayerNumber(),PLAYERINFO_GENDER) == 1)
	{
		SetActorProperty(0,APROP_DeathSound,"female/death");
		GiveInventory("IsFemale",1);
	}
	
	delay(5);
	ACS_ExecuteAlways (5, 0); // display credits/exp HUD
	ACS_ExecuteAlways (92, 0);
	
	// If we're in developer mode, make him gamemaster.
	if (Developer) {
		IsAdmin[PlayerNumber()] = true;
		
		SetFont ("BIGFONT");
		HudMessage(s:"This game is in developer mode. You have gamemaster access.";
			HUDMSG_FADEINOUT, 0, CR_BLUE, 0.5, 0.2, 7.0, 0.5, 1.0);
	}
}

 //--------------------------START UP MESSAGES
script 301 ENTER CLIENTSIDE {
	SetFont ("BIGFONT");
	HudMessage(s:"Welcome to \cFAll Out War 2!";
		HUDMSG_FADEINOUT, 0, CR_WHITE, 0.5, 0.3, 7.0, 0.5, 1.0);
	SetFont ("SMALLFONT");
	HudMessage (s:"Type \cFAOWHelp\cJ in console for information on how to play!";
		HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.45, 7.0, 1.0);
	HudMessage (s:"See \cFOptions \cN-> \cFCustomise Controls\c- for keybinds";
		HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.5, 7.0, 1.0);
	
	delay (20);
	LocalAmbientSound ("voltlock/welcome", 127);
}

Script 8 (int Gone) DISCONNECT {
	IsAdmin[Gone] = false;
	SetCreditsSilent(Credits[Gone+1], 0);
	Experience[Gone] = 0;
	Rank[Gone] = RANK_PRIVATE;
	Surrender[Gone] = 0;
	PlasmaCooldown[Gone] = 0;
	StartTime[Gone] = 0;
	
	if (MechGetter[0] == Gone && GettingMech[0])
		GettingMech[0] = 0;
	else if (MechGetter[1] == Gone && GettingMech[1])
		GettingMech[1] = 0;
	
	if (Surrender[Gone]) {
		Surrender[Gone] = false;
		if (PlayersTeam[Gone] == TEAM_RED) {
			HudMessageBold (s:"\cD", d:SurrenderCount (TEAM_RED), s:"\cQ/\cD", d:RedCount(), s:" ",
				s:"\cJof \cARed Team\cJ\n have voted to surrender";
				HUDMSG_FADEOUT, 15000, CR_WHITE,
				INTEL_XPOS, INTEL_YPOS2, 2.0, 1.0);
		} else if (PlayersTeam[Gone] == TEAM_BLUE) {
			HudMessageBold (s:"\cD", d:SurrenderCount (TEAM_BLUE), s:"\cQ/\cD", d:BlueCount(), s:" ",
				s:"\cJof \cNBlue Team\cJ\n have voted to surrender";
				HUDMSG_FADEOUT, 15000, CR_WHITE,
				INTEL_XPOS, INTEL_YPOS2, 2.0, 1.0);
		}
	}
	else // % of players surrendering could now be higher. Al demands a recount!
		ACS_Execute(751, 0);
}

script 303 OPEN {
	// these maps are too small to have portals
	delay (5);
	int levelnum = GetLevelInfo (LEVELINFO_LEVELNUM);
	if (levelnum ==  2) {UsePortals = 0;}
	if (levelnum ==  4) {UsePortals = 0;}
	if (levelnum ==  7) {UsePortals = 0;}
	if (levelnum == 15) {UsePortals = 0;}
}

function void InitPlayer (void) {
	SetCreditsSilent(Credits[PlayerNumber()+1], StartCredits);
	Experience[PlayerNumber()] = 0;
	Rank[PlayerNumber()] = RANK_PRIVATE;
	Surrender[PlayerNumber()] = False;
	PlayersTeam[PlayerNumber()+1] = PlayerTeam();
	StartTime[PlayerNumber()]=Timer();
	HasTeleported[PlayerNumber()] = false;
	RepairBonus[PlayerNumber()] = 0;
	MedicBonus[PlayerNumber()] = 0;
}