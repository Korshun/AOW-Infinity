#libdefine MAX_PLAYERS 64

// Inventory functions.

function void GiveMaxInventory(str item)
{
	GiveInventory(item, INT_MAX);
}

function void GiveMaxActorInventory(int tid, str item)
{
	GiveActorInventory(tid, item, INT_MAX);
}

function void TakeAllInventory(str item)
{
	TakeInventory(item, INT_MAX);
}

function void TakeAllActorInventory(int tid, str item)
{
	TakeActorInventory(tid, item, INT_MAX);
}

function void SetInventory(str item, int amount)
{
	int diff = amount - CheckInventory(item);
	if (diff > 0)
		GiveInventory(item, diff);
	else if (diff < 0)
		TakeInventory(item, -diff);
}

function void SetActorInventory(int tid, str item, int amount)
{
	int diff = amount - CheckActorInventory(tid, item);
	if (diff > 0)
		GiveActorInventory(tid, item, diff);
	else if (diff < 0)
		TakeActorInventory(tid, item, -diff);
}

function void ToggleInventory(str item)
{
	if (CheckInventory(item) > 0)
		SetInventory(item, 0);
	else
		SetInventory(item, 1);
}


// Internationalization.
function str lang(str s)
{
	return StrParam(l:s);
}

// CVar functions.

function int a_GetCVarFixed(str name)
{
	return atof(GetCVarString(name));
}

function int GetCVarPercentage(str name)
{
	return (GetCVar(name)<<16) / 100;
}


// Screen info functions.

function int ScreenWidth(void)
{
	return GetCVar("vid_defwidth");
}

function int ScreenHeight(void)
{
	return GetCVar("vid_defheight");
}

function int AspectRatio(void)
{
	return FixedDiv(ScreenWidth() * 1.0, ScreenHeight() * 1.0);
}

function int StatusBarShown(void)
{
	return GetCVar("screenblocks") <= 10;
}


// HudMessage functions

function void ClearHudMessage(int id)
{
	HudMessage(s:""; HUDMSG_PLAIN, id, 0, 0, 0, 0, 0);
}

function void ClearHudMessageBold(int id)
{
	HudMessageBold(s:""; HUDMSG_PLAIN, id, 0, 0, 0, 0, 0);
}

// Player functions

function str PlayerName(int num)
{
	return StrParam(n:(num+1));
}

function bool PlayerIsConnected(int player)
{
	return PlayerInGame(player) || PlayerIsSpectator(player);
}


function int BotCount(void)
{
	int count = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsBot(i))
			count++;
	return count;
}

function int ClientCount(void)
{
	int count = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsConnected(i))
			count++;
	return count;
}

function int SpectatorCount(void)
{
	int count = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsSpectator(i))
			count++;
	return count;
}


int _Players[MAX_PLAYERS];

function int PickRandomClient(void)
{
	int numPlayers = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsConnected(i))
			_Players[numPlayers++] = i;
	
	if (numPlayers == 0)
		return -1;
	
	return _Players[Random(0, numPlayers - 1)];
}

function int PickRandomPlayer(void)
{
	int numPlayers = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerInGame(i))
			_Players[numPlayers++] = i;
	
	if (numPlayers == 0)
		return -1;
	
	return _Players[Random(0, numPlayers - 1)];
}

function int PickRandomSpectator(void)
{
	int numPlayers = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsSpectator(i))
			_Players[numPlayers++] = i;
	
	if (numPlayers == 0)
		return -1;
	
	return _Players[Random(0, numPlayers - 1)];
}

function int PickRandomBot(void)
{
	int numPlayers = 0;
	for (int i = 0; i < MAX_PLAYERS; i++)
		if (PlayerIsBot(i))
			_Players[numPlayers++] = i;
	
	if (numPlayers == 0)
		return -1;
	
	return _Players[Random(0, numPlayers - 1)];
}


// Advanced activator functions

function void SwapActivator(int tid)
{
	if (tid == 0 || ActivatorTid() == tid)
	{
		r1 = 0;
		r2 = 0;
		return;
	}

	int prevtid = ActivatorTid();
	int temptid = NewTid();
	Thing_ChangeTid(0, temptid);
	setActivator(tid);
	r1 = prevtid;
	r2 = temptid;
}

function void RestoreActivator(int prevtid, int temptid)
{
	if (temptid != 0)
	{
		SetActivator(temptid);
		Thing_ChangeTid(0, prevtid);
	}
}


// Actor information functions

function int ActorPlayerNumber(int tid)
{
	SwapActivator(tid);
	int a = r1;
	int b = r2;

	int result = PlayerNumber();
	
	RestoreActivator(a, b);
	return result;
}

function bool IsPlayer(void)
{
	return PlayerNumber() >= 0;
}

function bool ActorIsPlayer(int tid)
{
	return ActorPlayerNumber(tid) >= 0;
}

function str ActivatorName(void)
{
	return StrParam(n:0);
}

function str GetActorName(int tid)
{
	SwapActivator(tid);
	int a = r1;
	int b = r2;
	
	str result = StrParam(n:0);
	
	RestoreActivator(a, b);
	return result;
}

function bool IsAlive(void)
{
	return GetActorProperty(0, APROP_HEALTH) > 0;
}

function bool ActorIsAlive(int tid)
{
	return GetActorProperty(tid, APROP_HEALTH) > 0;
}


// Actor math functions.

function int ActorDistance(int tid1, int tid2)
{
	return length3d(GetActorX(tid2) - GetActorX(tid1),
	                GetActorY(tid2) - GetActorY(tid1),
	                GetActorZ(tid2) - GetActorZ(tid1));
}

function int ActorDistance2D(int tid1, int tid2)
{
	return length2d(GetActorX(tid2) - GetActorX(tid1),
	                GetActorY(tid2) - GetActorY(tid1));
}

function int GetActorCurrentSpeed(int tid)
{
	return length3d(GetActorVelX(tid), GetActorVelY(tid), GetActorVelZ(tid));
}

function int GetActorCurrentSpeed2D(int tid)
{
	return length2d(GetActorVelX(tid), GetActorVelY(tid));
}


// Actor utility functions.

function bool HasRoom(str classname, int x, int y, int z)
{
	int tid = NewTid();
	if (!Spawn(classname, x, y, z, tid))
		return false;
	Thing_Remove(tid);
	return true;
}

function void LookAtPoint(int tid, int x, int y, int z)
{ 	
	x -= GetActorX(tid);
	y -= GetActorY(tid);
	z -= GetActorZ(tid) + GetActorViewHeight(tid);

	VectorToAngles(x, y, z);
	int angle = r1;
	int pitch = r2;

	SetActorAngle(tid, angle);
	SetActorPitch(tid, -pitch);
}

function void LookAt(int tid, int target)
{
	int x = GetActorX(target);
	int y = GetActorY(target);
	int z = GetActorZ(target) + GetActorViewHeight(target);
	LookAtPoint(tid, x, y, z);
}


// Actor property shorthands with network optimization.
// Idea from AOW.

function int  GetActorHealth(int tid) { return GetActorProperty(tid, APROP_HEALTH); } 
function void SetActorHealth(int tid, int hp)
{ 
	if (GetActorProperty(tid, APROP_HEALTH) != hp)
		SetActorProperty(tid, APROP_HEALTH, hp);
}

function int  GetActorSpawnHealth(int tid) { return GetActorProperty(tid, APROP_SPAWNHEALTH); }
function void SetActorSpawnHealth(int tid, int shp)
{
	if (GetActorProperty(tid, APROP_SPAWNHEALTH) != shp)
		SetActorProperty(tid, APROP_SPAWNHEALTH, shp);
}

function int GetActorSpeed(int tid) { return GetActorProperty(tid, APROP_SPEED); }
function void SetActorSpeed (int tid, int value)
{
	if (GetActorProperty(tid, APROP_SPEED) != value)
		SetActorProperty(tid, APROP_SPEED, value);
}

// ChangeFlag

// Implementation from ACS-X.

function str _ChangeFlagName(str flag, bool value)
{
	return StrParam(s:"ACSUtils_CF_", s:flag, s:"_", d:!!value);
}

function void ChangeFlag(str flag, bool value)
{
	GiveInventory(_ChangeFlagName(flag, value), 1);
}

function void ChangeActorFlag(int tid, str flag, bool value)
{
	GiveActorInventory(tid, _ChangeFlagName(flag, value), 1);
}


// Mapping functions.

// From ZDoom wiki.
function int SyncSpeed(int newdistance, int syncdistance, int syncspd)
{
	int t = fixeddiv(syncdistance<<16, syncspd<<16);
	int r = fixeddiv(newdistance<<16, t);
	return r>>16;
}