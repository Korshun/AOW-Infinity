// When editing default values, also edit them in acsglobal.acs
// When adding new properties, don't forget to edit ACSUTILS_HUDSTATE_SIZE.
#define ACSUTILS_HUDSTATE_SIZE 39
#define ACSUTILS_HUDLIB_STACKSIZE ACSUTILS_HUDSTATE_SIZE * ACSUTILS_HUDLIB_SAVEDSTATES

function void HudResetState(void)
{
	ACSUtils[ACSUTILS_R_Is3DPoint] = false;


	ACSUtils[ACSUTILS_R3D_CameraX] = 0.0;
	ACSUtils[ACSUTILS_R3D_CameraY] = 0.0;
	ACSUtils[ACSUTILS_R3D_CameraZ] = 0.0;
	ACSUtils[ACSUTILS_R3D_CameraAngle] = 0.0;
	ACSUtils[ACSUTILS_R3D_CameraPitch] = 0.0;

	ACSUtils[ACSUTILS_R3D_X] = 0.0;
	ACSUtils[ACSUTILS_R3D_Y] = 0.0;
	ACSUtils[ACSUTILS_R3D_Z] = 0.0;

	ACSUtils[ACSUTILS_R3D_2DOffsetX] = 0.0;
	ACSUtils[ACSUTILS_R3D_2DOffsetY] = 0.0;

	ACSUtils[ACSUTILS_R3D_AutoDistanceScale] = true;
	ACSUtils[ACSUTILS_R3D_ProjectionMode] = HUD_PROJECTION_AUTO;

	ACSUtils[ACSUTILS_R_BaseWidth] = 640.0;
	ACSUtils[ACSUTILS_R_BaseHeight] = 480.0;
	ACSUtils[ACSUTILS_R_ExcludeStatusBar] = false;

	ACSUtils[ACSUTILS_R_X] = 0.0;
	ACSUtils[ACSUTILS_R_Y] = 0.0;

	ACSUtils[ACSUTILS_R_IScaleX] = 1.0;
	ACSUtils[ACSUTILS_R_IScaleY] = 1.0;

	ACSUtils[ACSUTILS_R_ShowToEveryone] = false;

	ACSUtils[ACSUTILS_R_AppearTime] = 0.0;
	ACSUtils[ACSUTILS_R_StayTime] = HUD_STAYTIME_FOREVER;
	ACSUtils[ACSUTILS_R_DisappearTime] = 0.0;

	ACSUtils[ACSUTILS_R_BlendStyle] = HUD_BLENDSTYLE_NORMAL;
	ACSUtils[ACSUTILS_R_Alpha] = 1.0;

	ACSUtils[ACSUTILS_R_ShowIn3DView] = true;
	ACSUtils[ACSUTILS_R_ShowOnFullAutomap] = true;
	ACSUtils[ACSUTILS_R_ShowOnOverlayAutomap] = true;

	ACSUtils[ACSUTILS_R_Layer] = HUDMSG_LAYER_OVERHUD;

	ACSUtils[ACSUTILS_R_TextOriginX] = HUD_TEXTORIGIN_CENTER;
	ACSUtils[ACSUTILS_R_TextOriginY] = HUD_TEXTORIGIN_CENTER;
	ACSUtils[ACSUTILS_R_CenterText] = false;
	ACSUtilsStrings[ACSUTILSSTRING_R_TextFont] = "SMALLFONT";
	ACSUtils[ACSUTILS_R_TextColorIsString] = false;
	ACSUtils[ACSUTILS_R_TextColor] = CR_UNTRANSLATED;
	ACSUtils[ACSUTILS_R_TextTypeOn] = false;
	ACSUtils[ACSUTILS_R_LogMessage] = false;
	ACSUtils[ACSUTILS_R_TextWordWrap] = false;
}

int HudStateStack[ACSUTILS_HUDLIB_STACKSIZE];
//int ACSUtils[ACSUTILS_HudStateStackTop];

function void HudClearStateStack(void)
{
	ACSUtils[ACSUTILS_HudStateStackTop] = 0;
}

function void HudPushState(void)
{
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_Is3DPoint];


	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R3D_CameraX];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R3D_CameraY];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R3D_CameraZ];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R3D_CameraAngle];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R3D_CameraPitch];

	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R3D_X];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R3D_Y];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R3D_Z];

	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R3D_2DOffsetX];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R3D_2DOffsetY];

	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R3D_AutoDistanceScale];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R3D_ProjectionMode];

	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_BaseWidth];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_BaseHeight];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_ExcludeStatusBar];

	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_X];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_Y];

	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_IScaleX];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_IScaleY];

	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_ShowToEveryone];

	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_AppearTime];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_StayTime];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_DisappearTime];

	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_BlendStyle];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_Alpha];

	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_ShowIn3DView];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_ShowOnFullAutomap];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_ShowOnOverlayAutomap];

	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_Layer];

	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_TextOriginX];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_TextOriginY];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_CenterText];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtilsStrings[ACSUTILSSTRING_R_TextFont];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_TextColorIsString];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_TextColor];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_TextTypeOn];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_LogMessage];
	HudStateStack[ACSUtils[ACSUTILS_HudStateStackTop]++] = ACSUtils[ACSUTILS_R_TextWordWrap];
	
	if (ACSUtils[ACSUTILS_HudStateStackTop] > ACSUTILS_HUDLIB_STACKSIZE)
		LimitError("HudPushState(): state stack overflow.");
}

function void HudPopState(void)
{
	if (ACSUtils[ACSUTILS_HudStateStackTop] == 0)
	{
		ProgramError("HudPopState() called with no saved state.");
		return;
	}

	ACSUtils[ACSUTILS_R_TextWordWrap] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_LogMessage] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_TextTypeOn] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_TextColor] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_TextColorIsString] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtilsStrings[ACSUTILSSTRING_R_TextFont] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_CenterText] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_TextOriginY] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_TextOriginX] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];

	ACSUtils[ACSUTILS_R_Layer] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];

	ACSUtils[ACSUTILS_R_ShowOnOverlayAutomap] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_ShowOnFullAutomap] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_ShowIn3DView] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];

	ACSUtils[ACSUTILS_R_Alpha] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_BlendStyle] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];

	ACSUtils[ACSUTILS_R_DisappearTime] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_StayTime] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_AppearTime] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];

	ACSUtils[ACSUTILS_R_ShowToEveryone] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];

	ACSUtils[ACSUTILS_R_IScaleY] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_IScaleX] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];

	ACSUtils[ACSUTILS_R_Y] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_X] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];

	ACSUtils[ACSUTILS_R_ExcludeStatusBar] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_BaseHeight] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R_BaseWidth] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];

	ACSUtils[ACSUTILS_R3D_ProjectionMode] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R3D_AutoDistanceScale] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];

	ACSUtils[ACSUTILS_R3D_2DOffsetY] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R3D_2DOffsetX] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];

	ACSUtils[ACSUTILS_R3D_Z] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R3D_Y] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R3D_X] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];

	ACSUtils[ACSUTILS_R3D_CameraPitch] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R3D_CameraAngle] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R3D_CameraZ] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R3D_CameraY] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	ACSUtils[ACSUTILS_R3D_CameraX] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];


	ACSUtils[ACSUTILS_R_Is3DPoint] = HudStateStack[--ACSUtils[ACSUTILS_HudStateStackTop]];
	
	if (ACSUtils[ACSUTILS_HudStateStackTop] < 0)
		ProgramError("HudPushState/HudPopState are bugged. Report this bug to the acsutils project.");
}

function void HudSetCameraPosition(int x, int y, int z)
{
	ACSUtils[ACSUTILS_R3D_CameraX] = x;
	ACSUtils[ACSUTILS_R3D_CameraY] = y;
	ACSUtils[ACSUTILS_R3D_CameraZ] = z;
}

function void HudSetCameraAngles(int angle, int pitch)
{
	ACSUtils[ACSUTILS_R3D_CameraAngle] = angle;
	ACSUtils[ACSUTILS_R3D_CameraPitch] = pitch;
}

#libdefine HUD_CAMERAACTOR_NOPOSITION 1
#libdefine HUD_CAMERAACTOR_NOPREDICTION 2
#libdefine HUD_CAMERAACTOR_NODIRECTION 4
#libdefine HUD_CAMERAACTOR_NOVIEWHEIGHT 8

function void HudSetCameraActorAdvanced(int tid, int flags)
{
	if (!(flags & HUD_CAMERAACTOR_NOPOSITION))
	{
		int x = GetActorX(tid);
		int y = GetActorY(tid);
		int z = GetActorZ(tid);
		
		if (!(flags & HUD_CAMERAACTOR_NOVIEWHEIGHT))
			z += GetActorViewHeight(tid);
		
		if (!(flags & HUD_CAMERAACTOR_NOPREDICTION))
		{
			x -= GetActorVelX(tid);
			y -= GetActorVelY(tid);
			z -= GetActorVelZ(tid);
		}	
		
		HudSetCameraPosition(x, y, z);
	}
	
	if (!(flags & HUD_CAMERAACTOR_NODIRECTION))
		HudSetCameraAngles(GetActorAngle(tid), -GetActorPitch(tid));
}

function void HudSetCameraActor(int tid)
{
	HudSetCameraActorAdvanced(tid, 0);
}

function void HudSetPoint3D(int x, int y, int z)
{
	ACSUtils[ACSUTILS_R_Is3DPoint] = true;
	ACSUtils[ACSUTILS_R3D_X] = x;
	ACSUtils[ACSUTILS_R3D_Y] = y;
	ACSUtils[ACSUTILS_R3D_Z] = z;
}

function void HudSet2DOffset(int x, int y)
{
	ACSUtils[ACSUTILS_R3D_2DOffsetX] = x;
	ACSUtils[ACSUTILS_R3D_2DOffsetY] = y;
}

function void HudSetAutoDistanceScale(bool autoDistanceScale)
{
	ACSUtils[ACSUTILS_R3D_AutoDistanceScale] = autoDistanceScale;
}

function void HudSetProjectionMode(int mode)
{
	ACSUtils[ACSUTILS_R3D_ProjectionMode] = mode;
}

function void HudSetVirtualSize(int width, int height)
{
	ACSUtils[ACSUTILS_R_BaseWidth] = width;
	ACSUtils[ACSUTILS_R_BaseHeight] = height;
}

function void HudUseDefaultSize(void)
{
	ACSUtils[ACSUTILS_R_BaseWidth] = 640.0;
	ACSUtils[ACSUTILS_R_BaseHeight] = 480.0;
}

function void HudUseRealSize(void)
{
	ACSUtils[ACSUTILS_R_BaseWidth] = ScreenWidth()<<16;
	ACSUtils[ACSUTILS_R_BaseHeight] = ScreenHeight()<<16;
}

function void HudSetExcludeStatusBar(bool exclude)
{
	ACSUtils[ACSUTILS_R_ExcludeStatusBar] = exclude;
}

function void HudSetPoint(int x, int y)
{
	ACSUtils[ACSUTILS_R_Is3DPoint] = false;
	ACSUtils[ACSUTILS_R_X] = x;
	ACSUtils[ACSUTILS_R_Y] = y;
}

function void HudSetScaleXY(int scaleX, int scaleY)
{
	if (scaleX != 0)
		ACSUtils[ACSUTILS_R_IScaleX] = FixedDiv(1.0, scaleX);
	else
		ACSUtils[ACSUTILS_R_IScaleX] = 0;
	
	if (scaleY != 0)
		ACSUtils[ACSUTILS_R_IScaleY] = FixedDiv(1.0, scaleY);
	else
		ACSUtils[ACSUTILS_R_IScaleY] = 0;
}

function void HudSetScale(int scale)
{
	HudSetScaleXY(scale, scale);
}

function void HudSetInvScale(int invScale)
{
	ACSUtils[ACSUTILS_R_IScaleX] = invScale;
	ACSUtils[ACSUTILS_R_IScaleY] = invScale;
}

function void HudSetInvScaleXY(int invScaleX, int invScaleY)
{
	ACSUtils[ACSUTILS_R_IScaleX] = invScaleX;
	ACSUtils[ACSUTILS_R_IScaleY] = invScaleY;
}

function void HudSetShowToEveryone(bool showToEveryone)
{
	ACSUtils[ACSUTILS_R_ShowToEveryone] = showToEveryone;
}

function void HudSetAppearTime(int appearTime)
{
	ACSUtils[ACSUTILS_R_AppearTime] = appearTime;
}

function void HudSetStayTime(int stayTime)
{
	ACSUtils[ACSUTILS_R_StayTime] = stayTime;
}

function void HudSetDisappearTime(int disappearTime)
{
	ACSUtils[ACSUTILS_R_DisappearTime] = disappearTime;
}

function void HudSetBlendStyle(int style)
{
	ACSUtils[ACSUTILS_R_BlendStyle] = style;
}

function void HudSetAlpha(int alpha)
{
	ACSUtils[ACSUTILS_R_Alpha] = alpha;
}

function void HudSetShowIn3DView(bool show)
{
	ACSUtils[ACSUTILS_R_ShowIn3DView] = show;
}

function void HudSetShowOnFullAutomap(bool show)
{
	ACSUtils[ACSUTILS_R_ShowOnFullAutomap] = show;
}

function void HudSetShowOnOverlayAutomap(bool show)
{
	ACSUtils[ACSUTILS_R_ShowOnOverlayAutomap] = show;
}

function void HudSetLayer(int layer)
{
	ACSUtils[ACSUTILS_R_Layer] = layer;
}

function void HudSetFont(str font)
{
	ACSUtilsStrings[ACSUTILSSTRING_R_TextFont] = font;
}

function void HudSetTextColor(int textColor)
{
	ACSUtils[ACSUTILS_R_TextColorIsString] = false;
	ACSUtils[ACSUTILS_R_TextColor] = textColor;
}

function void HudSetTextColorString(str textColor)
{
	ACSUtils[ACSUTILS_R_TextColorIsString] = true;
	ACSUtils[ACSUTILS_R_TextColor] = textColor;
}

function void HudSetCenterText(bool centerText)
{
	ACSUtils[ACSUTILS_R_CenterText] = centerText;
}

function void HudSetTextOrigin(int originX, int originY)
{
	ACSUtils[ACSUTILS_R_TextOriginX] = originX;
	ACSUtils[ACSUTILS_R_TextOriginY] = originY;
}

function void HudSetTextOriginX(int originX)
{
	ACSUtils[ACSUTILS_R_TextOriginX] = originX;
}

function void HudSetTextOriginY(int originY)
{
	ACSUtils[ACSUTILS_R_TextOriginY] = originY;
}

function void HudSetTextTypeOn(bool textTypeOn)
{
	ACSUtils[ACSUTILS_R_TextTypeOn] = textTypeOn;
}

function void HudSetLogMessage(bool logMessage)
{
	ACSUtils[ACSUTILS_R_LogMessage] = logMessage;
}

function void HudSetWordWrap(bool wordWrap)
{
	ACSUtils[ACSUTILS_R_TextWordWrap] = wordWrap;
}

//int ACSUtils[ACSUTILS_R_RotatedX];
//int ACSUtils[ACSUTILS_R_RotatedY];
//int ACSUtils[ACSUTILS_R_RotatedZ];

function bool _HudUseYShearingProjection(void)
{
	if (ACSUtils[ACSUTILS_R3D_ProjectionMode] == HUD_PROJECTION_AUTO)
		return !IsOpenGL();
	
	return ACSUtils[ACSUTILS_R3D_ProjectionMode] == HUD_PROJECTION_YSHEARING;
}

// Rotate 3D point to view coordinate system.
function void HudRotate3DPoint(void)
{
	// Translated point coordinates.
	int x = ACSUtils[ACSUTILS_R3D_X] - ACSUtils[ACSUTILS_R3D_CameraX];
	int y = ACSUtils[ACSUTILS_R3D_Y] - ACSUtils[ACSUTILS_R3D_CameraY];
	int z = ACSUtils[ACSUTILS_R3D_Z] - ACSUtils[ACSUTILS_R3D_CameraZ];

	int rx, ry, rz;
	int s, c;

	// Rotate around Z axis.
	s = sin(-ACSUtils[ACSUTILS_R3D_CameraAngle]);
	c = cos(-ACSUtils[ACSUTILS_R3D_CameraAngle]);
	rx = FixedMul(x, c) - FixedMul(y, s);
	ry = FixedMul(x, s) + FixedMul(y, c);
	x = rx; y = ry;

	// Rotate around Y axis.
	if (!_HudUseYShearingProjection())
	{
		s = sin(-ACSUtils[ACSUTILS_R3D_CameraPitch]);
		c = cos(-ACSUtils[ACSUTILS_R3D_CameraPitch]);
		rx = FixedMul(x, c) - FixedMul(z, s);
		rz = FixedMul(x, s) + FixedMul(z, c);
		x = rx; z = rz;
	}

	ACSUtils[ACSUTILS_R_RotatedX] = x;
	ACSUtils[ACSUTILS_R_RotatedY] = y;
	ACSUtils[ACSUTILS_R_RotatedZ] = z;
}

function int HudGetDistance(void)
{
	HudRotate3DPoint();
	return ACSUtils[ACSUTILS_R_RotatedX];
}


#libdefine CAMERA_BASE_DISTANCE 128

function void HudDrawHudMessage(int id, int type, str text, bool isText)
{
	if (ACSUtils[ACSUTILS_R_IScaleX] == 0 || ACSUtils[ACSUTILS_R_IScaleY] == 0)
		return;

	type |= ACSUtils[ACSUTILS_R_Layer];
	if (!ACSUtils[ACSUTILS_R_ShowIn3DView])
		type |= HUDMSG_NOTWITH3DVIEW;
	if (!ACSUtils[ACSUTILS_R_ShowOnFullAutomap])
		type |= HUDMSG_NOTWITHFULLMAP;
	if (!ACSUtils[ACSUTILS_R_ShowOnOverlayAutomap])
		type |= HUDMSG_NOTWITHOVERLAYMAP;
		
	if (ACSUtils[ACSUTILS_R_Alpha] != 1.0)
	{
		if (ACSUtils[ACSUTILS_R_BlendStyle] == HUD_BLENDSTYLE_ADDITIVE)
			type |= HUDMSG_ADDBLEND;
		else
			type |= HUDMSG_ALPHA;
	}
	
	int x = ACSUtils[ACSUTILS_R_X];
	int y = ACSUtils[ACSUTILS_R_Y];
	int iScaleX = ACSUtils[ACSUTILS_R_IScaleX];
	int iScaleY = ACSUtils[ACSUTILS_R_IScaleY];
	
	if (ACSUtils[ACSUTILS_R_Is3DPoint])
	{
		HudRotate3DPoint();

		// Check if point is behind the camera.
		if (ACSUtils[ACSUTILS_R_RotatedX] <= 0)
		{
			ClearHudMessage(id);
			return;
		}
			
		// I don't know what this factor means, but it fixes positioning bugs.
		int yFactor = 1.6;
		if (StatusBarShown())
			yFactor = 1.9;

		// Half heights.
		int hw = ACSUtils[ACSUTILS_R_BaseWidth]>>1;
		int hh = ACSUtils[ACSUTILS_R_BaseHeight]>>1;		

		// Project point.
		x = tan(-VectorAngle(ACSUtils[ACSUTILS_R_RotatedX], ACSUtils[ACSUTILS_R_RotatedY]));
		y = tan(-VectorAngle(ACSUtils[ACSUTILS_R_RotatedX], ACSUtils[ACSUTILS_R_RotatedZ]));
		
		if (_HudUseYShearingProjection())
			y += tan(ACSUtils[ACSUTILS_R3D_CameraPitch]);
		
		// Postprocess projected point.
		x += ACSUtils[ACSUTILS_R3D_2DOffsetX] + hw + FixedMul(hw, x);
		y += ACSUtils[ACSUTILS_R3D_2DOffsetY] + hh + FixedMul(FixedMul(hh, yFactor), y);
		
		if (ACSUtils[ACSUTILS_R3D_AutoDistanceScale])
		{
			iScaleX = FixedMul(iScaleX, ACSUtils[ACSUTILS_R_RotatedX] / CAMERA_BASE_DISTANCE);
			iScaleY = FixedMul(iScaleY, ACSUtils[ACSUTILS_R_RotatedX] / CAMERA_BASE_DISTANCE);
		}
	}
	
	int w = FixedMul(ACSUtils[ACSUTILS_R_BaseWidth], iScaleX);
	int h = FixedMul(ACSUtils[ACSUTILS_R_BaseHeight], iScaleY);
	SetHudSize(itrunc(w), itrunc(h), !(ACSUtils[ACSUTILS_R_Is3DPoint] || ACSUtils[ACSUTILS_R_ExcludeStatusBar]));
	
	x = trunc(FixedMul(x, iScaleX));
	y = trunc(FixedMul(y, iScaleY));
	
	if (ACSUtils[ACSUTILS_R_TextOriginX] == HUD_TEXTORIGIN_LEFT)
		x += 0.1;
	else if (ACSUtils[ACSUTILS_R_TextOriginX] == HUD_TEXTORIGIN_RIGHT)
		x += 0.2;
		
	if (ACSUtils[ACSUTILS_R_TextOriginY] == HUD_TEXTORIGIN_TOP)
		y += 0.1;
	else if (ACSUtils[ACSUTILS_R_TextOriginY] == HUD_TEXTORIGIN_BOTTOM)
		y += 0.2;
		
	if (ACSUtils[ACSUTILS_R_CenterText])
		x += 0.4;
	
	// BUG: this really simplifies the code, but the messages will only stay
	// for 9 hours.
	int stayTime = ACSUtils[ACSUTILS_R_StayTime];
	if (stayTime < 0)
		stayTime = 32767.0;
	
	if (ACSUtils[ACSUTILS_R_ShowToEveryone])
	{
		HudMessageBold(s:text;
			type,
			id,
			ACSUtils[ACSUTILS_R_TextColor],
			x, y,
			stayTime, ACSUtils[ACSUTILS_R_AppearTime], ACSUtils[ACSUTILS_R_DisappearTime],
			ACSUtils[ACSUTILS_R_Alpha]
		);
	}
	else
	{
		HudMessage(s:text;
			type,
			id,
			ACSUtils[ACSUTILS_R_TextColor],
			x, y,
			stayTime, ACSUtils[ACSUTILS_R_AppearTime], ACSUtils[ACSUTILS_R_DisappearTime],
			ACSUtils[ACSUTILS_R_Alpha]
		);
	}
}

function void HudDrawText(int id, str text)
{
	int type = HUDMSG_FADEINOUT;
	if (ACSUtils[ACSUTILS_R_AppearTime] > 0 && ACSUtils[ACSUTILS_R_TextTypeOn])
		type = HUDMSG_TYPEON;
	
	if (ACSUtils[ACSUTILS_R_LogMessage])
		type |= HUDMSG_LOG;
	if (ACSUtils[ACSUTILS_R_TextColorIsString])
		type |= HUDMSG_COLORSTRING;
	if (!ACSUtils[ACSUTILS_R_TextWordWrap])
		type |= HUDMSG_NOWRAP;

	SetFont(ACSUtilsStrings[ACSUTILSSTRING_R_TextFont]);
	HudDrawHudMessage(id, type, text, true);
}

function void HudDrawImage(int id, str image)
{
	SetFont(image);
	HudDrawHudMessage(id, HUDMSG_FADEINOUT, "A", false);
}
